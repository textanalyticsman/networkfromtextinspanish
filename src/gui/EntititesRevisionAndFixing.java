/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import database.DAOCorpus;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.persistence.EntityManager;
import javax.persistence.Persistence;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import logic.CCorpus;
import logic.CEntityRawSentence;
import logic.CEntityRawTypeModificationsControl;
import org.apache.commons.lang3.text.WordUtils;

/**
 *
 * @author osboxes
 */
public class EntititesRevisionAndFixing extends javax.swing.JInternalFrame {

    /**
     * Creates new form CorpusDocumentsReport
     */
    public EntititesRevisionAndFixing() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonLoadAvailableCorpora = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableAvailableCorpora = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCorpusEntities = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jButtonDeleteSelectecDocuments = new javax.swing.JButton();
        jButtonUpdateModifiedEntities = new javax.swing.JButton();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);

        jButtonLoadAvailableCorpora.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jButtonLoadAvailableCorpora.setText("Load available corpora");
        jButtonLoadAvailableCorpora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadAvailableCorporaActionPerformed(evt);
            }
        });

        jTableAvailableCorpora.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Identifier", "Corpus description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableAvailableCorpora.setToolTipText("");
        jTableAvailableCorpora.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableAvailableCorporaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableAvailableCorpora);

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel1.setText("Entities that belong to the selected corpus");

        jTableCorpusEntities.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Entity Identifier", "Entity name", "Entity type", "Entity length", "Sentence Identifier", "Sentence", "Delete"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCorpusEntities.setToolTipText("");
        jTableCorpusEntities.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCorpusEntitiesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableCorpusEntities);
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(jTableCorpusEntities.getModel());
        jTableCorpusEntities.setRowSorter(sorter);
        //jTableCorpusEntities.convertRowIndexToView(0);

        List<RowSorter.SortKey> sortKeys = new ArrayList<>(25);
        sortKeys.add(new RowSorter.SortKey(1, SortOrder.ASCENDING));
        sortKeys.add(new RowSorter.SortKey(3, SortOrder.ASCENDING));
        sorter.setSortKeys(sortKeys);

        TableColumn typeColumn = jTableCorpusEntities.getColumnModel().getColumn(2);
        JComboBox comboBox = new JComboBox();
        comboBox.addItem("LOC");
        comboBox.addItem("ORG");
        comboBox.addItem("OTH");
        comboBox.addItem("PER");
        typeColumn.setCellEditor(new DefaultCellEditor(comboBox));

        ////////////////////////////////////////////////////////////////////
        //Source: https://tips4java.wordpress.com/2009/06/07/table-cell-listener/
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                if(tcl.getColumn()==2)
                {
                    System.out.println("Row   : " + tcl.getRow());
                    System.out.println("Column: " + tcl.getColumn());
                    System.out.println("Old   : " + tcl.getOldValue());
                    System.out.println("New   : " + tcl.getNewValue());
                    // int trueIndex=jTableCorpusEntities.convertRowIndexToModel(tcl.getRow()-2);
                    //System.out.println("True index: " + trueIndex);
                    int currentRow=tcl.getRow();
                    int entityId=(Integer)jTableCorpusEntities.getModel().getValueAt(currentRow, 0);
                    String entityName=(String)jTableCorpusEntities.getModel().getValueAt(currentRow, 1);
                    String oldType=(String)tcl.getOldValue();
                    String newType=(String)tcl.getNewValue();
                    int sentenceId=(Integer)jTableCorpusEntities.getModel().getValueAt(currentRow, 4);
                    String sentence=(String)jTableCorpusEntities.getModel().getValueAt(currentRow, 5);
                    System.out.println("Entity id: " + entityId);

                    addEntityIntoHashMap(entityId, entityName, oldType, newType, sentenceId, sentence);
                }

            }
        };

        TableCellListener tcl = new TableCellListener(jTableCorpusEntities, action);

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel2.setText("Available corpora within the database");

        jButtonDeleteSelectecDocuments.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jButtonDeleteSelectecDocuments.setText("Delete selected entities");
        jButtonDeleteSelectecDocuments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteSelectecDocumentsActionPerformed(evt);
            }
        });

        jButtonUpdateModifiedEntities.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jButtonUpdateModifiedEntities.setText("Update modified entities");
        jButtonUpdateModifiedEntities.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateModifiedEntitiesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonLoadAvailableCorpora)
                        .addContainerGap(1050, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(28, 28, 28)
                                        .addComponent(jButtonUpdateModifiedEntities)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButtonDeleteSelectecDocuments)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(28, 28, 28))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonLoadAvailableCorpora)
                .addGap(11, 11, 11)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonUpdateModifiedEntities, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonDeleteSelectecDocuments, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonLoadAvailableCorporaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadAvailableCorporaActionPerformed
        // TODO add your handling code here:
        CCorpus corpus = new CCorpus();
        
        List<DAOCorpus> resultList = corpus.getAvailableCorpora();
        
        for (DAOCorpus c : resultList) {
            //jTextArea1.append(c.getName() + " (" + c.getCity() + ")" + "\n");
            //System.out.println(c.getName() + " (" + c.getCity() + ")" + "\n");

            DefaultTableModel model = (DefaultTableModel)jTableAvailableCorpora.getModel();
            Integer identifier=(Integer)c.getCorpid();
            String description=c.getCorpdesc();           

            model.insertRow(jTableAvailableCorpora.getRowCount(), new Object []{identifier,description});

        }        
 
 
    }//GEN-LAST:event_jButtonLoadAvailableCorporaActionPerformed

    private void jTableAvailableCorporaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAvailableCorporaMouseClicked
        // TODO add your handling code here:
        showAvailableCorpora();
 
    }//GEN-LAST:event_jTableAvailableCorporaMouseClicked

    private void showAvailableCorpora()
    {
        CCorpus corpus=new CCorpus();
        
        int row=jTableAvailableCorpora.getSelectedRow();        
        
        int id=(Integer)jTableAvailableCorpora.getValueAt(row, 0);  
        
        if (corpus.validateEntitiesExistanceForCorpus(id)) 
        {
            int numEntities=jTableCorpusEntities.getRowCount();

            if (numEntities>0)
            {
                DefaultTableModel model = (DefaultTableModel)jTableCorpusEntities.getModel();
                model.setRowCount(0);        
            }

            List <Object[]>results=corpus.getEntitiesBelongToCorpus(id);

            for (Object[] result : results) {
                // Iterating through array object
                /*System.out.println(result[0]+ "*******"+result[1]+"*******"+result[2]+"*******"+result[3]+
                "*******"+result[4]+"*******"+result[5]+"*******"+result[6]); */
                DefaultTableModel model = (DefaultTableModel)jTableCorpusEntities.getModel();
                String temp=(String)result[1];
                int length=temp.length();
                int result5=(Integer)result[5];
                Object [] newRow = new Object []{result[0],result[1],result[2],length,result5,result[6]};
                model.insertRow(jTableCorpusEntities.getRowCount(), newRow);
            }            
        }
        else
        {
            String message="The selected corpus does not belong entities";
            String title="Entities revision and correction";                
            JOptionPane.showMessageDialog(null,message,title, JOptionPane.INFORMATION_MESSAGE);             
        }                
    }
    
    private void jButtonDeleteSelectecDocumentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteSelectecDocumentsActionPerformed
        // TODO add your handling code here:
        
        String answer=deleteEntityAndUpdateSentence();
        
        if(answer.compareTo("")==0)
        {
            showAvailableCorpora();

            String message="Selected entities were deleted";
            String title="Entities revision and correction";                
            JOptionPane.showMessageDialog(null,message,title, JOptionPane.INFORMATION_MESSAGE);                               
        }
        else
        {
            String title="Entities revision and correction";                
            JOptionPane.showMessageDialog(null,answer,title, JOptionPane.INFORMATION_MESSAGE);                                           
        }

    }//GEN-LAST:event_jButtonDeleteSelectecDocumentsActionPerformed

    private String deleteEntityAndUpdateSentence()
    {
        int rowCount=jTableCorpusEntities.getRowCount();
        
        String answer="";
        
        boolean flag=true;
        
        EntityManager em = Persistence.createEntityManagerFactory("SNAFromSpanishTextPU").createEntityManager();                        
        
        if (rowCount>0)
        {
            int row=jTableAvailableCorpora.getSelectedRow();                
            int corpusId=(Integer)jTableAvailableCorpora.getValueAt(row, 0);
            
            CCorpus corpus= new CCorpus();
            
            if(!corpus.corpusHasCluster(corpusId))
            {
                em.getTransaction().begin();
                int selectedRows=0;



                for (int i=0;i<rowCount;i++)
                {

                    if(jTableCorpusEntities.getValueAt(i, 6)!=null)
                    {
                        selectedRows++;
                        /*
                        I have to call a function to delete an entity, this function needs 
                        the ID of the entity. In addition, this function needs the entity name
                        and the sentences in order to update the sentence
                        */
                        //int 
                        CEntityRawSentence entrawsent=new CEntityRawSentence();
                        int entityId= (Integer)jTableCorpusEntities.getValueAt(i,0);
                        String entity=(String)jTableCorpusEntities.getValueAt(i,1);
                        String type=(String)jTableCorpusEntities.getValueAt(i,2);
                        int sentenceId= (Integer)jTableCorpusEntities.getValueAt(i,4);
                        String sentence=(String)jTableCorpusEntities.getValueAt(i,5);

                        try
                        {
                            entrawsent.deleteEntityAndUpdateSentece(em, entityId, entity, type, sentenceId, sentence);                        
                        }
                        catch(Exception e)
                        {
                            answer="A problem happened when the system tried to erase entities";
                            flag=false;
                            break;
                        }

                    }
                }
                if(selectedRows==0)
                {
                    answer="You must select entities before deleting";
                }
                try
                {
                    if(flag)
                    {
                        em.getTransaction().commit();                    
                    }
                    else
                    {
                        em.getTransaction().rollback();
                    }                                
                }
                catch(Exception e)
                {
                    em.getTransaction().rollback();      
                    answer="A problem happened when the system tried to erase entities";
                }                
            }
            else
            {
                //Aquí debo aplicar un procedimiento de borrado que primero elimine
                //la referencia de la tabla entityrawcluster
                em.getTransaction().begin();
                int selectedRows=0;



                for (int i=0;i<rowCount;i++)
                {

                    if(jTableCorpusEntities.getValueAt(i, 6)!=null)
                    {
                        selectedRows++;
                        /*
                        I have to call a function to delete an entity, this function needs 
                        the ID of the entity. In addition, this function needs the entity name
                        and the sentences in order to update the sentence
                        */
                        //int 
                        CEntityRawSentence entrawsent=new CEntityRawSentence();
                        int entityId= (Integer)jTableCorpusEntities.getValueAt(i,0);
                        String entity=(String)jTableCorpusEntities.getValueAt(i,1);
                        String type=(String)jTableCorpusEntities.getValueAt(i,2);
                        int sentenceId= (Integer)jTableCorpusEntities.getValueAt(i,4);
                        String sentence=(String)jTableCorpusEntities.getValueAt(i,5);

                        try
                        {
                            entrawsent.deleteEntityClusterAndUpdateSentece(em, entityId, entity, type, sentenceId, sentence);                        
                        }
                        catch(Exception e)
                        {
                            answer="A problem happened when the system tried to erase entities";
                            e.printStackTrace();
                            flag=false;
                            break;
                        }

                    }
                }
                if(selectedRows==0)
                {
                    answer="You must select entities before deleting";
                }
                try
                {
                    if(flag)
                    {
                        em.getTransaction().commit();                    
                    }
                    else
                    {
                        em.getTransaction().rollback();
                    }                                
                }
                catch(Exception e)
                {
                    em.getTransaction().rollback();      
                    answer="A problem happened when the system tried to erase entities";
                }                
                
            }
        }
        else
        {            
            answer="You must select a corpus before deleting entities";
            /*String title="Entities revision and correction";                
            JOptionPane.showMessageDialog(null,message,title, JOptionPane.INFORMATION_MESSAGE);*/                                 
        }
        
        return answer;
    }
    
    private void jTableCorpusEntitiesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCorpusEntitiesMouseClicked
        // TODO add your handling code here:               
        if(evt.getClickCount()==2)
        {
            int row=jTableCorpusEntities.getSelectedRow();
            
            System.out.println("Row: " + row);
            
            int trueIndex=jTableCorpusEntities.convertRowIndexToModel(row);
            
            System.out.println("Fila: " + trueIndex);
       
            String sentence= (String)jTableCorpusEntities.getModel().getValueAt(trueIndex, 5);
       
            String message=WordUtils.wrap(sentence, 150, "\n", false);
            
            String title="Sentence detail";
            
            HighlightText ht = new HighlightText();
            
            JTextArea messageJTextArea = ht.highLightText(message);
            
            JOptionPane.showMessageDialog(null,messageJTextArea,title, JOptionPane.INFORMATION_MESSAGE);                                                                    
        }
    }//GEN-LAST:event_jTableCorpusEntitiesMouseClicked
        
    private void jButtonUpdateModifiedEntitiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateModifiedEntitiesActionPerformed
        // TODO add your handling code here:
        String answer=updateEntityAndUpdateSentence();
        
        if(answer.compareTo("")==0)
        {
            showAvailableCorpora();

            String message="Entities were modified";
            String title="Entities revision and correction";                
            JOptionPane.showMessageDialog(null,message,title, JOptionPane.INFORMATION_MESSAGE);                               
        }
        else
        {
            String title="Entities revision and correction";                
            JOptionPane.showMessageDialog(null,answer,title, JOptionPane.INFORMATION_MESSAGE);                                           
        }        
    }//GEN-LAST:event_jButtonUpdateModifiedEntitiesActionPerformed
  
    private boolean validateInput()
    {
        int numRows=jTableCorpusEntities.getRowCount();        
        
        boolean answer=false;
        
        if (numRows>0)
        {
            answer=true;
        }
        
        return answer;
    }
    
    private void addEntityIntoHashMap(int entityId, String entityName, String oldType, String newType, int sentenceId, String sentence) 
    {
        if(hmapModifiedEntities.get((Integer) entityId)!=null)//reviso si la entidad ya existe en el Hash Map
        {
            /*Si la entidad ya existe en el Hash Map simplemente modifico su NewType*/
            CEntityRawTypeModificationsControl temp= (CEntityRawTypeModificationsControl)hmapModifiedEntities.get((Integer) entityId);
            temp.setNewType(newType);
        }
        else
        {
            /*Si la entidad no existe en el Hash Map, la añado*/
            CEntityRawTypeModificationsControl obj= new CEntityRawTypeModificationsControl(entityName, oldType, newType, sentenceId, sentence);
            hmapModifiedEntities.put((Integer)entityId, obj);            
        }
        
        
    }
    
    private String updateEntityAndUpdateSentence()
    {
        int rowCount=jTableCorpusEntities.getRowCount();
        
        String answer="";
        
        boolean flag=true;
        
        EntityManager em = Persistence.createEntityManagerFactory("SNAFromSpanishTextPU").createEntityManager();                    
       
        
        if (rowCount>0)
        {
            if(hmapModifiedEntities.size()>0)
            {
                em.getTransaction().begin();                      

                for (Integer key : hmapModifiedEntities.keySet()) 
                {
                    //System.out.println(key + " " + hmapModifiedEntities.get(key));
                    CEntityRawTypeModificationsControl obj=hmapModifiedEntities.get(key);

                    CEntityRawSentence entrawsent=new CEntityRawSentence();

                    int entityId= key;
                    String entityName=obj.getEntityName();
                    String oldType=obj.getOldType();
                    String newType=obj.getNewType();
                    int sentenceId= obj.getSentenceId();
                    String sentence=obj.getSentence();

                    try
                    {
                        entrawsent.updateEntityAndUpdateSentence(em, entityId, entityName, oldType, newType, sentenceId,sentence);                        
                    }
                    catch(Exception e)
                    {
                        answer="A problem happened when the system tried to update entities";
                        flag=false;
                        break;
                    }            
                }
                hmapModifiedEntities.clear();

                try
                {
                    if(flag)
                    {
                        em.getTransaction().commit();                    
                    }
                    else
                    {
                        em.getTransaction().rollback();
                    }                                
                }
                catch(Exception e)
                {
                    em.getTransaction().rollback();      
                    answer="A problem happened when the system tried to erase entities";
                }                
                
            }
            else
            {
                answer="You must modify some entities' types before updating the database";
            }
        }
        else
        {            
            answer="You must select a corpus before deleting entities";
            /*String title="Entities revision and correction";                
            JOptionPane.showMessageDialog(null,message,title, JOptionPane.INFORMATION_MESSAGE);*/                                 
        }
        
        return answer;
    }
    
    private HashMap<Integer, CEntityRawTypeModificationsControl> hmapModifiedEntities = new HashMap<Integer, CEntityRawTypeModificationsControl>();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDeleteSelectecDocuments;
    private javax.swing.JButton jButtonLoadAvailableCorpora;
    private javax.swing.JButton jButtonUpdateModifiedEntities;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableAvailableCorpora;
    private javax.swing.JTable jTableCorpusEntities;
    // End of variables declaration//GEN-END:variables
}
