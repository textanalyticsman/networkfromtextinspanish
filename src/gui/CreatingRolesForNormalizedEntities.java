/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import database.DAOCorpus;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.Persistence;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import logic.CCluster;
import logic.CCorpus;
import logic.CEntityNormRoleModificationControl;
import logic.CEntityNormalized;
import logic.CEntityRaw;
import logic.CEntityRawSentence;
import logic.CEntityRawTypeModificationsControl;
import org.apache.commons.lang3.text.WordUtils;

/**
 *
 * @author osboxes
 */
public class CreatingRolesForNormalizedEntities extends javax.swing.JInternalFrame {

    /**
     * Creates new form EntitiesExtraction
     */
    public CreatingRolesForNormalizedEntities() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonLoadAvailableCorpora = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableAvailableCorpora = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableConfigurationClusterAvailable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTableNormalizedEntities = new javax.swing.JTable();
        jButtonUpdateRolesForNormEnt = new javax.swing.JButton();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);

        jButtonLoadAvailableCorpora.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jButtonLoadAvailableCorpora.setText("Load available corpora");
        jButtonLoadAvailableCorpora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadAvailableCorporaActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel2.setText("Available corpora within the database");

        jTableAvailableCorpora.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Identifier", "Corpus description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableAvailableCorpora.setToolTipText("");
        jTableAvailableCorpora.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableAvailableCorpora.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableAvailableCorporaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableAvailableCorpora);

        jLabel8.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel8.setText("Available configured clusters");

        jTableConfigurationClusterAvailable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MinPts", "Epsilon"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableConfigurationClusterAvailable.setToolTipText("");
        jTableConfigurationClusterAvailable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableConfigurationClusterAvailable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableConfigurationClusterAvailableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTableConfigurationClusterAvailable);

        jLabel5.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel5.setText("List of normalized entities");

        jTableNormalizedEntities.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ent Id", "Entity", "Type", "Sentence", "Role"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableNormalizedEntities.setToolTipText("");
        jTableNormalizedEntities.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableNormalizedEntities.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableNormalizedEntitiesMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(jTableNormalizedEntities);
        TableRowSorter<TableModel> sorter04 = new TableRowSorter<TableModel>(jTableNormalizedEntities.getModel());
        jTableNormalizedEntities.setRowSorter(sorter04);
        //jTableCorpusEntities.convertRowIndexToView(0);

        List<RowSorter.SortKey> sortKeys04 = new ArrayList<>(25);
        sortKeys04.add(new RowSorter.SortKey(1, SortOrder.ASCENDING));
        sortKeys04.add(new RowSorter.SortKey(3, SortOrder.ASCENDING));
        sorter04.setSortKeys(sortKeys04);

        TableColumn typeColumn = jTableNormalizedEntities.getColumnModel().getColumn(4);
        JComboBox comboBox = new JComboBox();
        comboBox.addItem("Journalist");
        comboBox.addItem("Law enforcement authority");
        comboBox.addItem("Suspect");
        comboBox.addItem("Victim");
        comboBox.addItem("Witness");
        comboBox.addItem("Other");
        typeColumn.setCellEditor(new DefaultCellEditor(comboBox));

        ////////////////////////////////////////////////////////////////////
        //Source: https://tips4java.wordpress.com/2009/06/07/table-cell-listener/
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                if(tcl.getColumn()==4)
                {
                    System.out.println("Row   : " + tcl.getRow());
                    System.out.println("Column: " + tcl.getColumn());
                    System.out.println("Old   : " + tcl.getOldValue());
                    System.out.println("New   : " + tcl.getNewValue());

                    int currentRow=tcl.getRow();
                    int entityId=(Integer)jTableNormalizedEntities.getModel().getValueAt(currentRow, 0);
                    String entityName=(String)jTableNormalizedEntities.getModel().getValueAt(currentRow, 1);
                    String oldRole=(String)tcl.getOldValue();
                    String newRole=(String)tcl.getNewValue();

                    System.out.println("Entity id: " + entityId);

                    addEntityIntoHashMap(entityId, entityName, oldRole, newRole);
                }

            }
        };

        TableCellListener tcl = new TableCellListener(jTableNormalizedEntities, action);

        jButtonUpdateRolesForNormEnt.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jButtonUpdateRolesForNormEnt.setText("Update roles");
        jButtonUpdateRolesForNormEnt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateRolesForNormEntActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonUpdateRolesForNormEnt, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButtonLoadAvailableCorpora)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(46, 46, 46)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel8)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(jLabel5)
                        .addComponent(jScrollPane7)))
                .addGap(47, 47, 47))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonLoadAvailableCorpora)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButtonUpdateRolesForNormEnt, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonLoadAvailableCorporaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadAvailableCorporaActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model1 = (DefaultTableModel) jTableAvailableCorpora.getModel();
        model1.setRowCount(0);
        
        CCorpus corpus = new CCorpus();

        List<DAOCorpus> resultList = corpus.getAvailableCorpora();

        for (DAOCorpus c : resultList) {
            //jTextArea1.append(c.getName() + " (" + c.getCity() + ")" + "\n");
            //System.out.println(c.getName() + " (" + c.getCity() + ")" + "\n");

            DefaultTableModel model = (DefaultTableModel)jTableAvailableCorpora.getModel();
            Integer identifier=(Integer)c.getCorpid();
            String description=c.getCorpdesc();

            model.insertRow(jTableAvailableCorpora.getRowCount(), new Object []{identifier,description});

        }

    }//GEN-LAST:event_jButtonLoadAvailableCorporaActionPerformed

    private void jTableAvailableCorporaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAvailableCorporaMouseClicked
        // TODO add your handling code here:
        showConfiguredClusterByCorpus();
    }//GEN-LAST:event_jTableAvailableCorporaMouseClicked

    private void showConfiguredClusterByCorpus()
    {
        DefaultTableModel model = (DefaultTableModel) jTableConfigurationClusterAvailable.getModel();
        model.setRowCount(0);
        
        model = (DefaultTableModel) jTableNormalizedEntities.getModel();
        model.setRowCount(0);
        
        int row=jTableAvailableCorpora.getSelectedRow();                
        int corpusId=(Integer)jTableAvailableCorpora.getValueAt(row, 0);   
        
        CCluster cluster = new CCluster();

        List <Object[]>results=cluster.getAvailableClusterConfigurationsByCorpusId(corpusId);

        for (Object[] result : results) {
            // Iterating through array object
            model = (DefaultTableModel)jTableConfigurationClusterAvailable.getModel();
            int minPts=(Integer)result[0];
            double epsilon=(Double)result[1];
            Object [] newRow = new Object []{minPts, epsilon};
            model.insertRow(jTableConfigurationClusterAvailable.getRowCount(), newRow);
        }        
        
    }

    
    private void refreshScreenAfterGeneratingNewCluster()
    { /*       
        int row=jTableAvailableCorpora.getSelectedRow();                
        int corpusId=(Integer)jTableAvailableCorpora.getValueAt(row, 0); 
        
        row=jTableConfigurationClusterAvailable.getSelectedRow();
        
        int minPts=(Integer)jTableConfigurationClusterAvailable.getValueAt(row, 0); 
        double epsilon=(Double)jTableConfigurationClusterAvailable.getValueAt(row, 1); 
        
        showClusters(corpusId, minPts,  epsilon);*/

        //showEntitiesAndSentencesByCluster(jTableCorpusEntitiesBelongCluster,jTableClusters);
        //showEntitiesAndSentencesByCluster(jTableCorpusEntitiesBelongCluster1,jTableClusters1);
    }
    
    private String moveEntitiesIntoOtherCluster()
    { 
        String answer="";
                
       
        
        return answer;
    }
    
    private void showNormalizedEntities(int corpusId,int minPts, double epsilon)
    {
        //DefaultTableModel model1 = (DefaultTableModel) jTableClusters.getModel();
        //model1.setRowCount(0);
        CEntityNormalized entNorm = new CEntityNormalized();
        
        DefaultTableModel model1 = (DefaultTableModel) jTableNormalizedEntities.getModel();
        model1.setRowCount(0);

//        model1 = (DefaultTableModel) jTableEntitiesBelongToNormalEntity.getModel();
  //      model1.setRowCount(0);

        // TODO add your handling code here:
        List<Object[]> resultSet = entNorm.getNormalizedEntitiesAndSentences(corpusId, minPts, epsilon);
        
        //entnorm.ENTITYNORMID,entnorm.ENTITYNORMNAME, entnorm.ENTITYNORMTYPE, sent.SENTENCEID, sent.SENTENCECONTENT, entnorm.ENTITYNORMROLE 

        for (Object[] result : resultSet) {

//            DefaultTableModel model = (DefaultTableModel)jTableClusters.getModel();
            DefaultTableModel modelc1 = (DefaultTableModel)jTableNormalizedEntities.getModel();            
            Integer entityId=(Integer)result[0];
            String entity=(String)result[1];
            String type=(String)result[2];
            String sentence=(String)result[4];
            
            String role=(String)result[5];

            modelc1.insertRow(jTableNormalizedEntities.getRowCount(), new Object []{entityId,entity,type,sentence,role});
        }            
                                       
    }       
    
    
    private void showEntitiesAndSentencesByCluster(javax.swing.JTable entityTable, javax.swing.JTable clusterTable)
    {
        DefaultTableModel model = (DefaultTableModel) entityTable.getModel();
        model.setRowCount(0);
        
        int row=clusterTable.getSelectedRow();                
        int clusterId=(Integer)clusterTable.getValueAt(row, 0);   
        
        CEntityRaw centityRaw = new CEntityRaw();
        
        List <Object[]>results=centityRaw.getEntitiesAndSentencesByCluster(clusterId);
        
        for (Object[] result : results) {
            // Iterating through array object
            model = (DefaultTableModel)entityTable.getModel();
            String temp=(String)result[1];
            int length=temp.length();
            Object [] newRow = new Object []{result[0],result[1],result[2],length,result[3],result[4]};
            model.insertRow(entityTable.getRowCount(), newRow);
        }         
        
    }
    
    private void showEntitiesAndSentencesByClusterAndEntity(javax.swing.JTable entityTable, javax.swing.JTable clusterTable)
    {
        DefaultTableModel model = (DefaultTableModel) entityTable.getModel();
        model.setRowCount(0);
        
        int row=clusterTable.getSelectedRow();                
        int clusterId=(Integer)clusterTable.getValueAt(row, 0);   
        
        row=clusterTable.getSelectedRow();                
        int label=(Integer)clusterTable.getValueAt(row, 1);  
        
        if(label!=2147483647) //Para los que no son ruido
        {
            CEntityRaw centityRaw = new CEntityRaw();

            List <Object[]>results=centityRaw.getEntitiesAndSentencesByCluster(clusterId);

            for (Object[] result : results) {
                // Iterating through array object
                model = (DefaultTableModel)entityTable.getModel();
                String temp=(String)result[1];
                int length=temp.length();
                Object [] newRow = new Object []{result[0],result[1],result[2],length,result[3],result[4]};
                model.insertRow(entityTable.getRowCount(), newRow);
            }               
        }
        else //Para los que son ruido
        {
            CEntityRaw centityRaw = new CEntityRaw();
            
            row=clusterTable.getSelectedRow();                
            int entityId=(Integer)clusterTable.getValueAt(row, 2); 

            Object[] result=centityRaw.getEntitiesAndSentencesByClusterAndEntity(clusterId,entityId); 
            
            model = (DefaultTableModel)entityTable.getModel();
            String temp=(String)result[1];
            int length=temp.length();
            Object [] newRow = new Object []{result[0],result[1],result[2],length,result[3],result[4]};
            model.insertRow(entityTable.getRowCount(), newRow);            
            
        }             
        
    }
    
    private void jTableConfigurationClusterAvailableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableConfigurationClusterAvailableMouseClicked
        // TODO add your handling code here:                        
        int row=jTableAvailableCorpora.getSelectedRow();                
        int corpusId=(Integer)jTableAvailableCorpora.getValueAt(row, 0); 
        
        row=jTableConfigurationClusterAvailable.getSelectedRow();
        
        int minPts=(Integer)jTableConfigurationClusterAvailable.getValueAt(row, 0); 
        double epsilon=(Double)jTableConfigurationClusterAvailable.getValueAt(row, 1); 
        
        showNormalizedEntities(corpusId, minPts,  epsilon);
    }//GEN-LAST:event_jTableConfigurationClusterAvailableMouseClicked

    private void showNormalizedEntitiesAfterUpdating()
    {
        int row=jTableAvailableCorpora.getSelectedRow();                
        int corpusId=(Integer)jTableAvailableCorpora.getValueAt(row, 0); 
        
        row=jTableConfigurationClusterAvailable.getSelectedRow();
        
        int minPts=(Integer)jTableConfigurationClusterAvailable.getValueAt(row, 0); 
        double epsilon=(Double)jTableConfigurationClusterAvailable.getValueAt(row, 1); 
        
        showNormalizedEntities(corpusId, minPts,  epsilon);        
        
    }
    
    private void jButtonUpdateRolesForNormEntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateRolesForNormEntActionPerformed
        // TODO add your handling code here:
        String answer=updateNormalizedEntitiesRoles();
        
        if(answer.compareTo("")==0)
        {
//            refreshScreenAfterGeneratingNewCluster();

            String message="The roles of normalized entities were saved properly";
            String title="Updating roles for normalized entities";                
            JOptionPane.showMessageDialog(null,message,title, JOptionPane.INFORMATION_MESSAGE); 
            showNormalizedEntitiesAfterUpdating();
            
        }
        else
        {
            String title="Updating roles for normalized entities";                
            JOptionPane.showMessageDialog(null,answer,title, JOptionPane.ERROR_MESSAGE);                                           
        }     
    }//GEN-LAST:event_jButtonUpdateRolesForNormEntActionPerformed

    private String updateNormalizedEntitiesRoles()
    {
        int rowCount=jTableConfigurationClusterAvailable.getRowCount();
        
        String answer="";
        
        boolean flag=true;
        
        EntityManager em = Persistence.createEntityManagerFactory("SNAFromSpanishTextPU").createEntityManager();                    
       
        
        if (rowCount>0)
        {
            if(hmapModifiedEntities.size()>0)
            {
                em.getTransaction().begin();                      

                for (Integer key : hmapModifiedEntities.keySet()) 
                {
                    //System.out.println(key + " " + hmapModifiedEntities.get(key));
                    CEntityNormRoleModificationControl obj=hmapModifiedEntities.get(key);

                    CEntityNormalized entoNorm=new CEntityNormalized();

                    int entityId= key;
                    String entityName=obj.getEntityName();
                    String oldType=obj.getOldRole();
                    String newType=obj.getNewRole();


                    try
                    {
                        entoNorm.updateEntityNormRole(em, entityId, newType);
                    }
                    catch(Exception e)
                    {
                        answer="A problem happened when the system tried to update normalized entities";
                        flag=false;
                        break;
                    }            
                }
                hmapModifiedEntities.clear();

                try
                {
                    if(flag)
                    {
                        em.getTransaction().commit();                    
                    }
                    else
                    {
                        em.getTransaction().rollback();
                    }                                
                }
                catch(Exception e)
                {
                    em.getTransaction().rollback();      
                    answer="A problem happened when the system tried to update normalized entities";
                }                
                
            }
            else
            {
                answer="You must modify some normalized entities' types before updating the database";
            }
        }
        else
        {            
            answer="You must select a cluster configuration before editing normalized entities";
            /*String title="Entities revision and correction";                
            JOptionPane.showMessageDialog(null,message,title, JOptionPane.INFORMATION_MESSAGE);*/                                 
        }
        
        return answer;
    }    
    
    private void jTableNormalizedEntitiesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableNormalizedEntitiesMouseClicked
        if(evt.getClickCount()==2)
        {
            int row=jTableNormalizedEntities.getSelectedRow();

            System.out.println("Row: " + row);

            int trueIndex=jTableNormalizedEntities.convertRowIndexToModel(row);

            //System.out.println("Fila: " + trueIndex);

            String sentence= (String)jTableNormalizedEntities.getModel().getValueAt(trueIndex, 3);

            String message=WordUtils.wrap(sentence, 200, "\n", false);

            String title="Sentence detail";

            JOptionPane.showMessageDialog(null,message,title, JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jTableNormalizedEntitiesMouseClicked
    
 
 private void addEntityIntoHashMap(boolean newValue, int entityId) 
    {
        if(newValue)//reviso si la entidad ya existe en el Hash Map
        {
            /*Si la entidad ya existe en el Hash Map simplemente modifico su NewType*/
            entitiesToMove.add(entityId);
        }
        else
        {
            /*Si la entidad no existe en el Hash Map, la añado*/
            entitiesToMove.remove(entityId);
        }
        
        
    }    

     private void addEntityIntoHashMap(int entityId, String entityName, String oldRole, String newRole) 
    {
        if(hmapModifiedEntities.get((Integer) entityId)!=null)//reviso si la entidad ya existe en el Hash Map
        {
            /*Si la entidad ya existe en el Hash Map simplemente modifico su NewType*/
            CEntityNormRoleModificationControl temp= (CEntityNormRoleModificationControl)hmapModifiedEntities.get((Integer) entityId);
            temp.setNewRole(newRole);
        }
        else
        {
            /*Si la entidad no existe en el Hash Map, la añado*/
            CEntityNormRoleModificationControl obj= new CEntityNormRoleModificationControl(entityName, oldRole, newRole);
            hmapModifiedEntities.put((Integer)entityId, obj);            
        }
        
        
    }
 
    private HashSet<Integer> entitiesToMove = new HashSet<Integer>() ;
    
    private HashMap<Integer, CEntityNormRoleModificationControl> hmapModifiedEntities = new HashMap<Integer, CEntityNormRoleModificationControl>();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonLoadAvailableCorpora;
    private javax.swing.JButton jButtonUpdateRolesForNormEnt;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTable jTableAvailableCorpora;
    private javax.swing.JTable jTableConfigurationClusterAvailable;
    private javax.swing.JTable jTableNormalizedEntities;
    // End of variables declaration//GEN-END:variables
}
