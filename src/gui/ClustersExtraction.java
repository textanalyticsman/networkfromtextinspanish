/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import database.DAOCluster;
import database.DAOCorpus;
import database.DAOEntityRaw;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import javax.persistence.EntityManager;
import javax.persistence.Persistence;
import javax.swing.JOptionPane;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import logic.CCluster;
import logic.CCorpus;
import logic.CEntityRaw;
import org.apache.commons.lang3.text.WordUtils;

/**
 *
 * @author osboxes
 */
public class ClustersExtraction extends javax.swing.JInternalFrame {

    /**
     * Creates new form EntitiesExtraction
     */
    public ClustersExtraction() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonLoadAvailableCorpora = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableAvailableCorpora = new javax.swing.JTable();
        jButtonExtractClustersFromCorpus = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableClusters = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCorpusEntitiesBelongCluster = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldEpsilon = new javax.swing.JTextField();
        jTextFieldNumberPoints = new javax.swing.JTextField();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);

        jButtonLoadAvailableCorpora.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jButtonLoadAvailableCorpora.setText("Load available corpora");
        jButtonLoadAvailableCorpora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadAvailableCorporaActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel2.setText("Available corpora within the database");

        jTableAvailableCorpora.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Identifier", "Corpus description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableAvailableCorpora.setToolTipText("");
        jTableAvailableCorpora.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableAvailableCorpora.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableAvailableCorporaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableAvailableCorpora);

        jButtonExtractClustersFromCorpus.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jButtonExtractClustersFromCorpus.setText("Extract clusters from selected corpus");
        jButtonExtractClustersFromCorpus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExtractClustersFromCorpusActionPerformed(evt);
            }
        });

        jTableClusters.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cluster identifier", "Cluster label"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableClusters.setToolTipText("");
        jTableClusters.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableClusters.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableClustersMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTableClusters);

        jLabel3.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel3.setText("List of clusters");

        jTableCorpusEntitiesBelongCluster.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Entity Identifier", "Entity name", "Entity type", "Entity length"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCorpusEntitiesBelongCluster.setToolTipText("");
        jTableCorpusEntitiesBelongCluster.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCorpusEntitiesBelongClusterBelongClusterMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableCorpusEntitiesBelongCluster);
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(jTableCorpusEntitiesBelongCluster.getModel());
        jTableCorpusEntitiesBelongCluster.setRowSorter(sorter);
        //jTableCorpusEntities.convertRowIndexToView(0);

        List<RowSorter.SortKey> sortKeys = new ArrayList<>(25);
        sortKeys.add(new RowSorter.SortKey(1, SortOrder.ASCENDING));
        sortKeys.add(new RowSorter.SortKey(3, SortOrder.ASCENDING));
        sorter.setSortKeys(sortKeys);

        jLabel4.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel4.setText("Entities that belong to the selected cluster");

        jLabel5.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel5.setText("Cluster parameters - DBSCAN algorithm");

        jLabel6.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel6.setText("Epsilon");

        jLabel7.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel7.setText("Minimum number of points");

        jTextFieldEpsilon.setFocusCycleRoot(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(310, 310, 310)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jButtonExtractClustersFromCorpus)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel6))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jTextFieldEpsilon, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                                            .addComponent(jTextFieldNumberPoints)))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(190, 190, 190)
                                .addComponent(jLabel4))
                            .addComponent(jButtonLoadAvailableCorpora)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 399, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonLoadAvailableCorpora)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addComponent(jTextFieldEpsilon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addComponent(jTextFieldNumberPoints, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addComponent(jButtonExtractClustersFromCorpus, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonLoadAvailableCorporaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadAvailableCorporaActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model1 = (DefaultTableModel) jTableAvailableCorpora.getModel();
        model1.setRowCount(0);
        
        CCorpus corpus = new CCorpus();

        List<DAOCorpus> resultList = corpus.getAvailableCorpora();

        for (DAOCorpus c : resultList) {
            //jTextArea1.append(c.getName() + " (" + c.getCity() + ")" + "\n");
            //System.out.println(c.getName() + " (" + c.getCity() + ")" + "\n");

            DefaultTableModel model = (DefaultTableModel)jTableAvailableCorpora.getModel();
            Integer identifier=(Integer)c.getCorpid();
            String description=c.getCorpdesc();

            model.insertRow(jTableAvailableCorpora.getRowCount(), new Object []{identifier,description});

        }

    }//GEN-LAST:event_jButtonLoadAvailableCorporaActionPerformed

    private void jTableAvailableCorporaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAvailableCorporaMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jTableAvailableCorporaMouseClicked

    private void jButtonExtractClustersFromCorpusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExtractClustersFromCorpusActionPerformed
       
        String answer=generateClusterForCorpus();
        
        if(answer.compareTo("")==0)
        {
            //int selectedRow=jTableAvailableCorpora.getSelectedRow();
            //corpusId=(Integer)jTableAvailableCorpora.getValueAt(selectedRow, 0); 
            Double epsilon=Double.parseDouble(jTextFieldEpsilon.getText()) ;
            int minPts=Integer.parseInt(jTextFieldNumberPoints.getText());
            showClusters(corpusId, minPts,  epsilon);
            String message="Clusters for given corpus were created";
            String title="Corpus generation";                
            JOptionPane.showMessageDialog(null,message,title, JOptionPane.INFORMATION_MESSAGE);                               
        }
        else
        {
            String title="Corpus generation";                
            JOptionPane.showMessageDialog(null,answer,title, JOptionPane.INFORMATION_MESSAGE);                                           
        }            

    }//GEN-LAST:event_jButtonExtractClustersFromCorpusActionPerformed

    private void showClusters(int corpusId,int minPts, double epsilon)
    {
        DefaultTableModel model1 = (DefaultTableModel) jTableClusters.getModel();
        model1.setRowCount(0);
        
        model1 = (DefaultTableModel) jTableCorpusEntitiesBelongCluster.getModel();
        model1.setRowCount(0);
        
        // TODO add your handling code here:
        CCluster cluster = new CCluster();

        List<DAOCluster> resultSet = cluster.getAvailableClusters(corpusId, minPts, epsilon);

        for (DAOCluster c : resultSet) {
            //jTextArea1.append(c.getName() + " (" + c.getCity() + ")" + "\n");
            //System.out.println(c.getName() + " (" + c.getCity() + ")" + "\n");

            DefaultTableModel model = (DefaultTableModel)jTableClusters.getModel();
            Integer clusterid=c.getClusterid();
            Integer label=c.getLabel();

            model.insertRow(jTableClusters.getRowCount(), new Object []{clusterid,label});

        }
        
                        
    }
    
    private String generateClusterForCorpus()
    {        
        int numCorporaElements=jTableAvailableCorpora.getRowCount();
        
        int selectedRow=jTableAvailableCorpora.getSelectedRow();
        
        corpusId=(Integer)jTableAvailableCorpora.getValueAt(selectedRow, 0);  
        
        EntityManager em = Persistence.createEntityManagerFactory("SNAFromSpanishTextPU").createEntityManager(); 
        
        CCluster cluster = new CCluster();
        
        String message="";
        
        if(numCorporaElements>0)
        {
            if(selectedRow>-1)
            {
                message=validateClusterParameters();
                
                if(message.length()==0)
                {
                    
                    /*Aquí es donde debo hacer o llamar a la lógica que genera y muestra el cluster*/
                    Double epsilon=Double.parseDouble(jTextFieldEpsilon.getText()) ;
                    int minPts=Integer.parseInt(jTextFieldNumberPoints.getText());
                    
                    boolean clusterExistance=cluster.verifyClusterExistance(em, corpusId, minPts,epsilon);
                    
                    if(!clusterExistance)
                    {
                        em.getTransaction().begin();
                        message=cluster.generateClusters(em, minPts, epsilon,corpusId);

                        try
                        {
                            em.getTransaction().commit();
                        }
                        catch(Exception e)
                        {                            
                            message="A problem happened during the cluster generation";
                            em.getTransaction().rollback();
                            e.printStackTrace();
                            em.close();
                        }
                    }
                    else
                    {
                        message="This corpus has a cluster with the given parameters, please "
                                + "review that cluster using the option called Review and fix normalization";
                    }
                    
                }                
                
            }
            else
            {
                /*Aquí deber ir el mensaje que le indica al usuario que debe uno de los corpus disponibles*/
                message="You should select a cluster before generating clusters";
            }
        }
        else
        {
            /*Aquí deber ir el mensaje que le indica al usuario que debe cargar la lista de corpus disponibles*/
            message="You should load the available corpora before generating clusters";
        }
        
        return message;
    }
    
    private String validateClusterParameters()
    {
        String answer="";
        
        double epsilon=0;
        int numberPoints=0;
        
        try
        {
            epsilon=Double.parseDouble(jTextFieldEpsilon.getText()) ;
            numberPoints=Integer.parseInt(jTextFieldNumberPoints.getText());
        }
        catch(NumberFormatException e)
        {
            answer="In order to generate clusters you must use numerical parameters";
        }
        
        if(answer.length()==0)
        {
            if(epsilon>1 || epsilon <0)
            {
                answer="Epsilon should be a number between 0 and 1";
            }
            
            if(numberPoints<=0)
            {
                if(answer.length()==0)
                {
                    answer="The number of points should be greater than 1";
                }
                else
                {
                    answer=answer + " and the number of points should be greater than 2";
                }
            }            
        }    
        
        return answer;                
    }
    
    private void jTableClustersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableClustersMouseClicked
        // TODO add your handling code here:
        showEntitiesAndSentencesByCluster();
    }//GEN-LAST:event_jTableClustersMouseClicked
    
    private void showEntitiesAndSentencesByCluster()
    {
        DefaultTableModel model = (DefaultTableModel) jTableCorpusEntitiesBelongCluster.getModel();
        model.setRowCount(0);
        
        int row=jTableClusters.getSelectedRow();                
        int clusterId=(Integer)jTableClusters.getValueAt(row, 0);   
        
        CEntityRaw centityRaw = new CEntityRaw();
        
        List <Object[]>results=centityRaw.getEntitiesAndSentencesByCluster(clusterId);
        
        for (Object[] result : results) {
            // Iterating through array object
            model = (DefaultTableModel)jTableCorpusEntitiesBelongCluster.getModel();
            String temp=(String)result[1];
            int length=temp.length();
            Object [] newRow = new Object []{result[0],result[1],result[2],length};
            model.insertRow(jTableCorpusEntitiesBelongCluster.getRowCount(), newRow);
        }         
        
    }    
    
    
    private void jTableCorpusEntitiesBelongClusterBelongClusterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCorpusEntitiesBelongClusterBelongClusterMouseClicked
        // TODO add your handling code here:
        /*if(evt.getClickCount()==2)
        {
            int row=jTableCorpusEntitiesBelongCluster.getSelectedRow();

            System.out.println("Row: " + row);

            int trueIndex=jTableCorpusEntitiesBelongCluster.convertRowIndexToModel(row);

            System.out.println("Fila: " + trueIndex);

            String sentence= (String)jTableCorpusEntitiesBelongCluster.getModel().getValueAt(trueIndex, 5);

            String message=WordUtils.wrap(sentence, 200, "\n", false);

            String title="Sentence detail";

            JOptionPane.showMessageDialog(null,message,title, JOptionPane.INFORMATION_MESSAGE);
        }*/
    }//GEN-LAST:event_jTableCorpusEntitiesBelongClusterBelongClusterMouseClicked
    
    private int corpusId=0;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExtractClustersFromCorpus;
    private javax.swing.JButton jButtonLoadAvailableCorpora;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTableAvailableCorpora;
    private javax.swing.JTable jTableClusters;
    private javax.swing.JTable jTableCorpusEntitiesBelongCluster;
    private javax.swing.JTextField jTextFieldEpsilon;
    private javax.swing.JTextField jTextFieldNumberPoints;
    // End of variables declaration//GEN-END:variables
}
